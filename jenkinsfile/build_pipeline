pipeline {
    agent any
    environment {
        mvnHome = tool name: 'Maven 3.9.8', type: 'maven'
        mvnCMD = "${tool 'Maven 3.9.8'}/bin/mvn"

        scannerHome = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
        scannerCMD = "${scannerHome}/bin/sonar-scanner.bat"
    }

    stages {
       stages {
    stage('Git Checkout') {
        steps {
            script {
                def gitUrl = 'https://github.com/mohamedanismimouni/application-de-candidature-specifique.git'
                def credentialsId = 'mcb' 

                git credentialsId: credentialsId, branch: "${env.main}", url: gitUrl
                
            }
        }
    }
}


        stage('Build Backend') {
            steps {
                bat label: '', script: "${mvnCMD} -f api/pom.xml clean install -DskipTests"
            }
        }

        stage('Build Frontend') {
            when {
                expression {
                    return params.buildFront == true
                }
            }
            steps {
                bat label: '', script: "${mvnCMD} -f webapp/pom.xml clean install -DbuildDomain=${BaseURL}"
            }
        }

        stage('Preparing artifacts') {
            steps {
                bat script: 'powershell.exe -File scripts/zip-webapp.ps1' // Utilisation d'un script PowerShell pour zipper
                archiveArtifacts artifacts: 'applirh-front.zip, **/target/*.jar', followSymlinks: false
            }
        }

        stage('Sonar Code Quality Check') {
            when {
                expression {
                    return params.analyseSonar == true
                }
            }
            steps {
                withSonarQubeEnv("tti-sonar") {
                    bat label: '', script: "${scannerCMD}"
                }
            }
        }

        stage('Getting Artifacts On server') {
            agent { label 'tti140' }
            steps {
                sh label: 'Curl', script: "cd /home/byblos/jenkins/docker-images/applirh && ./get-artifact.sh"
                sh label: 'Copy Back', script: "cd /home/byblos/jenkins/docker-images/applirh && cp *.jar /home/byblos/jenkins/docker-images/applirh/api"
                sh label: 'Copy Front', script: "cd /home/byblos/jenkins/docker-images/applirh && cp *.zip /home/byblos/jenkins/docker-images/applirh/nginx"
                sh label: 'Unzip front', script: "cd /home/byblos/jenkins/docker-images/applirh/nginx && rm -r webapp && unzip applirh-front.zip"
                sh label: 'Build image', script: "cd /home/byblos/jenkins/docker-images/applirh/nginx && docker build -t rd.talan.com:5443/appli-rh/front ."
            }
        }

        stage('Docker build push') {
            agent { label 'tti140' }
            steps {
                sh label: 'Build image front', script: "cd /home/byblos/jenkins/docker-images/applirh/nginx && docker build -t rd.talan.com:5443/appli-rh/front ."
                sh label: 'Push image front', script: "docker push rd.talan.com:5443/appli-rh/front"
                sh label: 'Build image front', script: "cd /home/byblos/jenkins/docker-images/applirh/api && docker build --no-cache -t rd.talan.com:5443/appli-rh/appli-rh-api ."
                sh label: 'Push image front', script: "docker push rd.talan.com:5443/appli-rh/appli-rh-api"
            }
        }
    }

    post {
        failure {
            emailext attachLog: true, body: 'Pb de comilpactipn sur le projet Aplli-RH', subject: "Jankins > FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: params.mailingList
        }
        changed {
            emailext attachLog: true, body: "Job '${env.JOB_NAME} fixed!", subject: "Jankins > FIXED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'", to: params.mailingList
        }
    }
}
